theme(legend.position = c(.8, .15),
legend.justification = c("right", "bottom"),
legend.box.just = "right",
legend.title = element_text(colour = "black", size = 14),
legend.text = element_text(colour = "black
", size = 14),
legend.margin = margin(5, 5, 5, 5))
interact_plot(sc_sv_std_vstr,
pred = 'self_control_sv',
modx = 'accumbens_PVC.cm',
interval = FALSE, x.label = "Self-Control SV (Z-score)",
main.title = "A.",
legend.main="D2R Availability",
y.label = "Probability of Attempting to Resist",
colors = cols
) +
th +
theme(legend.position = c(.8, .15),
legend.justification = c("right", "bottom"),
legend.box.just = "right",
legend.title = element_text(colour = "black", size = 14),
legend.text = element_text(colour = "black", size = 14),
legend.margin = margin(5, 5, 5, 5))
interact_plot(sc_sv_std_vstr,
pred = 'self_control_sv',
modx = 'accumbens_PVC.cm',
interval = FALSE, x.label = "Self-Control SV (Z-score)",
main.title = "A.",
legend.main="D2R Availability",
y.label = "Probability of Attempting to Resist",
colors = cols
) +
th +
theme(legend.position = c(.8, .15),
legend.justification = c("right", "bottom"),
legend.box.just = "right",
legend.title = element_text(colour = "black", size = 14),
legend.text = element_text(colour = "black", size = 14),
legend.margin = margin(5, 5, 5, 5))
library(interactions)
Rstudio
rstudio
rstudioapi
quit()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("~/Desktop/legal_dm_fmri/CODE/sentiment_analysis")
knitr::opts_chunk$set(echo = TRUE)
library(tidytext)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(ggpubr)
library(wordcloud)
library(quanteda)
#robust correlation & regression
library(robcor)
library(MASS)
library(quantreg)
data <- read.csv(file="./scenario_classification.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
data <- within(data, {
crime_type <- factor(crime_type)
category <- factor(category)
jrl <- factor(jrl)
class <- factor(class)
})
set.seed(1000)
crimes <- data %>%
mutate(index = scenario) %>%
ungroup()
tidy_crimes <- crimes %>%
unnest_tokens(word, crime_description, token = "words")
#quick word count
word_count <- tidy_crimes %>%
group_by(scenario) %>%
summarise(count = n())
sentiment_nrc <- tidy_crimes %>%
anti_join(stop_words) %>%
group_by(scenario) %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(index = index, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
sentiment_nrc
sentiment_afinn <- tidy_crimes %>%
anti_join(stop_words) %>%
group_by(scenario) %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
summarise(sentiment_score = sum(score))
sentiment_afinn
sentiment_bing <- tidy_crimes %>%
anti_join(stop_words) %>%
group_by(scenario) %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(sentiment)
sentiment_bing
ggplot(sentiment_afinn, aes(x=sentiment_score)) + geom_histogram(binwidth = 1, color="black", fill="lightblue") + geom_vline(aes(xintercept=mean(sentiment_score)), color="blue", linetype="dashed", size=1)+th
th <- theme_classic()
ggplot(sentiment_afinn, aes(x=sentiment_score)) + geom_histogram(binwidth = 1, color="black", fill="lightblue") + geom_vline(aes(xintercept=mean(sentiment_score)), color="blue", linetype="dashed", size=1)+th
afinn_word_counts <- tidy_crimes %>%
inner_join(get_sentiments("afinn")) %>%
mutate(sentiment = ifelse(test = (score > 0),
yes = 'positive',
no = ifelse(test = (score < 0),
yes = 'negative',
no = NA))) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
afinn_word_counts
bing_word_counts <- tidy_crimes %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_word_counts
afinn_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + th
bing_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + th
#sentiment & word count
all_data <- data %>%
#inner_join(sentiment, by = "scenario") %>%
inner_join(word_count, by = "scenario") %>%
inner_join(sentiment_nrc, by = "scenario") %>%
inner_join(read_lvl, by = "scenario")
write.csv(all_data,
file = "./scenario_classification_with_sentiment_scores.csv",
row.names = FALSE)
afinn_data<-data %>%
inner_join(sentiment_afinn, by = 'scenario')
bing_data<-data %>%
inner_join(sentiment_bing, by = 'scenario')
corr <- round(cor(afinn_data[7:9],method="spearman"), 3)
ggcorrplot(corr, hc.order = FALSE, type = "lower", outline.color = "white",
lab = TRUE)
corr <- round(cor(afinn_data[7:9],method="spearman"), 3)
ggcorrplot(corr, hc.order = FALSE, type = "lower", outline.color = "white",
lab = TRUE)
corr <- round(cor(bing_data[7:9],method="spearman"), 3)
ggcorrplot(corr, hc.order = FALSE, type = "lower", outline.color = "white",
lab = TRUE)
bing_data
View(bing_data)
bing_data<-data %>%
inner_join(sentiment_bing, by = 'scenario') %>%
mutate(score=sum(n, sentiment, sort = TRUE)) %>%
test
bing_data<-data %>%
inner_join(sentiment_bing, by = 'scenario') %>%
mutate(score=sum(n, sentiment, sort = TRUE))
bing_word_counts
ggscatter(afinn_data, x = "case_strength_mean", y = "sentiment_score",
color = "black", shape = 21, size = 3,
add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"),
conf.int = TRUE,
cor.coef = TRUE,
cor.coeff.args = list(method = "spearman", label.x = 3, label.sep = "\n")
) + th
ggscatter(afinn_data, x = "punishment_mean", y = "sentiment_score",
color = "black", shape = 21, size = 3, # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "pearson", label.x = 3, label.sep = "\n")
) + th
sentiment_nrc <- tidy_crimes %>%
anti_join(stop_words) %>%
group_by(scenario) %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
View(sentiment_nrc)
sentiment_nrc <- tidy_crimes %>%
anti_join(stop_words) %>%
group_by(scenario) %>%
inner_join(get_sentiments("nrc"), by = "word")
View(sentiment_nrc)
sentiment_nrc <- tidy_crimes %>%
anti_join(stop_words) %>%
group_by(scenario) %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(index = index, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
sentiment_nrc
View(sentiment_bing)
sentiment_bing <- tidy_crimes %>%
anti_join(stop_words) %>%
group_by(scenario) %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(index = index, sentiment) %>%
sentiment_bing
sentiment_bing <- tidy_crimes %>%
anti_join(stop_words) %>%
group_by(scenario) %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(index = index, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
sentiment_bing
bing_data<-data %>%
inner_join(sentiment_bing, by = 'scenario')
View(sentiment_bing)
View(sentiment_bing)
View(bing_data)
corr <- round(cor(bing_data[7,8,10,11,12],method="spearman"), 3)
bing_data
corr <- round(cor(bing_data[7:8,10:12],method="spearman"), 3)
ggcorrplot(corr, hc.order = FALSE, type = "lower", outline.color = "white",
lab = TRUE)
bing_data
bing_data[7:8,10:12]
corr <- round(cor(bing_data[7:12],method="spearman"), 3)
ggcorrplot(corr, hc.order = FALSE, type = "lower", outline.color = "white",
lab = TRUE)
ggscatter(bing_data, x = "case_strength_mean", y = "sentiment",
color = "black", shape = 21, size = 3,
add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"),
conf.int = TRUE,
cor.coef = TRUE,
cor.coeff.args = list(method = "spearman", label.x = 3, label.sep = "\n")
) + th
#sentiment - punishment
ggscatter(bing_data, x = "punishment_mean", y = "sentiment",
color = "black", shape = 21, size = 3, # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "pearson", label.x = 3, label.sep = "\n")
) + th
ggscatter(all_data, x = "case_strength_mean", y = "sentiment",
color = "black", shape = 21, size = 3,
add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"),
conf.int = TRUE,
cor.coef = TRUE,
cor.coeff.args = list(method = "spearman", label.x = 3, label.sep = "\n")
) + th
#sentiment & word count
all_data <- data %>%
#inner_join(sentiment, by = "scenario") %>%
inner_join(word_count, by = "scenario") %>%
inner_join(sentiment_nrc, by = "scenario") %>%
inner_join(read_lvl, by = "scenario")
# word, sentence, and syllable counts, plus reading scores
read_lvl <- data %>%
mutate(syllables = nsyllable(crime_description),
sentences = nsentence(crime_description),
words = ntoken(crime_description, remove_punct = TRUE),
fk_grade = 0.39*(words/sentences) + 11.8*(syllables/words) - 15.59) %>%
arrange(scenario)
read_lvl <- dplyr::select(read_lvl,-c(2,3,4,5,6,7,8))
#sentiment & word count
all_data <- data %>%
#inner_join(sentiment, by = "scenario") %>%
inner_join(word_count, by = "scenario") %>%
inner_join(sentiment_nrc, by = "scenario") %>%
inner_join(read_lvl, by = "scenario")
write.csv(all_data,
file = "./scenario_classification_with_sentiment_scores.csv",
row.names = FALSE)
afinn_data<-data %>%
inner_join(sentiment_afinn, by = 'scenario')
bing_data<-data %>%
inner_join(sentiment_bing, by = 'scenario')
ggscatter(all_data, x = "case_strength_mean", y = "sentiment",
color = "black", shape = 21, size = 3,
add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"),
conf.int = TRUE,
cor.coef = TRUE,
cor.coeff.args = list(method = "spearman", label.x = 3, label.sep = "\n")
) + th
#sentiment - case strength
ggscatter(afinn_data, x = "case_strength_mean", y = "sentiment_score",
color = "black", shape = 21, size = 3,
add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"),
conf.int = TRUE,
cor.coef = TRUE,
cor.coeff.args = list(method = "spearman", label.x = 3, label.sep = "\n")
) + th
#sentiment - punishment
ggscatter(bing_data, x = "punishment_mean", y = "sentiment",
color = "black", shape = 21, size = 3, # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "pearson", label.x = 3, label.sep = "\n")
) + th
#sentiment - punishment
ggscatter(all_data, x = "punishment_mean", y = "sentiment",
color = "black", shape = 21, size = 3, # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "pearson", label.x = 3, label.sep = "\n")
) + th
#sentiment - punishment
ggscatter(afinn_data, x = "punishment_mean", y = "sentiment_score",
color = "black", shape = 21, size = 3, # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "pearson", label.x = 3, label.sep = "\n")
) + th
nrc_word_counts <- tidy_crimes %>%
inner_join(get_sentiments("nrc")) %>%
count(word, sentiment, sort = TRUE)
nrc_word_counts
nrc_word_counts <- tidy_crimes %>%
inner_join(get_sentiments("nrc")) %>%
count(word, sentiment, sort = TRUE) %>%
filter(sentiment = 'positive' | sentiment = 'negative')
ungroup()
nrc_word_counts <- tidy_crimes %>%
inner_join(get_sentiments("nrc")) %>%
count(word, sentiment, sort = TRUE) %>%
filter(sentiment = 'positive' | sentiment = 'negative') %>%
nrc_word_counts <- tidy_crimes %>%
inner_join(get_sentiments("nrc")) %>%
count(word, sentiment, sort = TRUE) %>%
filter(sentiment == 'positive' | sentiment == 'negative') %>%
ungroup()
nrc_word_counts
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + th
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE, aes(colour = 'black')) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + th
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE, aes(colour = 'black')) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + th
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE, aes(colour = 'black',edge='black')) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + th
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + th
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + theme_light()
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + theme_minimal()
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + theme_bw()
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + theme_grey()
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + theme_dark()
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + theme_classic()
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE, aes(colour = 'black',fill='black')) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + th
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE, aes(colour = 'black',fill='black')) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE, colour = 'black', aes(fill='black')) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + th
nrc_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE, colour = 'black', fill='black') +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip() + th
